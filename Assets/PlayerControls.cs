//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Common Movement"",
            ""id"": ""778cab1d-e5f2-466d-91c6-c5563a4f8020"",
            ""actions"": [
                {
                    ""name"": ""Horisontal Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e7b942a8-aa3f-427b-84f8-2ec69699230b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""05296e2c-f14e-4a8c-af1c-40e1dc573d24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""bdfb1218-7655-460b-9228-8871c02cdac4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""e45dcec6-4bc2-41a4-9f9f-260563e0779e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""A-D"",
                    ""id"": ""c5950bc2-3468-4dab-99b9-ec4dfffe186b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horisontal Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""feefe6d6-541b-4bfc-aa18-6736e13a4d21"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Horisontal Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""891ea9ef-8bf0-4d24-a821-7c4ff28a1a70"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Horisontal Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8b3c6431-977d-457d-8ff6-92edc2a17466"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90c991cb-2892-4b4b-b8f2-5ae29c8c2ed3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23ebe8d4-ced4-4b89-bd6f-4d612f768a4b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a9db410-2a27-4092-8b56-aee014bbe5ba"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Common Movement
        m_CommonMovement = asset.FindActionMap("Common Movement", throwIfNotFound: true);
        m_CommonMovement_HorisontalMovement = m_CommonMovement.FindAction("Horisontal Movement", throwIfNotFound: true);
        m_CommonMovement_Jump = m_CommonMovement.FindAction("Jump", throwIfNotFound: true);
        m_CommonMovement_Attack = m_CommonMovement.FindAction("Attack", throwIfNotFound: true);
        m_CommonMovement_Shoot = m_CommonMovement.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Common Movement
    private readonly InputActionMap m_CommonMovement;
    private ICommonMovementActions m_CommonMovementActionsCallbackInterface;
    private readonly InputAction m_CommonMovement_HorisontalMovement;
    private readonly InputAction m_CommonMovement_Jump;
    private readonly InputAction m_CommonMovement_Attack;
    private readonly InputAction m_CommonMovement_Shoot;
    public struct CommonMovementActions
    {
        private @PlayerControls m_Wrapper;
        public CommonMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorisontalMovement => m_Wrapper.m_CommonMovement_HorisontalMovement;
        public InputAction @Jump => m_Wrapper.m_CommonMovement_Jump;
        public InputAction @Attack => m_Wrapper.m_CommonMovement_Attack;
        public InputAction @Shoot => m_Wrapper.m_CommonMovement_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_CommonMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommonMovementActions set) { return set.Get(); }
        public void SetCallbacks(ICommonMovementActions instance)
        {
            if (m_Wrapper.m_CommonMovementActionsCallbackInterface != null)
            {
                @HorisontalMovement.started -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnHorisontalMovement;
                @HorisontalMovement.performed -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnHorisontalMovement;
                @HorisontalMovement.canceled -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnHorisontalMovement;
                @Jump.started -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnJump;
                @Attack.started -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnAttack;
                @Shoot.started -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_CommonMovementActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_CommonMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorisontalMovement.started += instance.OnHorisontalMovement;
                @HorisontalMovement.performed += instance.OnHorisontalMovement;
                @HorisontalMovement.canceled += instance.OnHorisontalMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public CommonMovementActions @CommonMovement => new CommonMovementActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface ICommonMovementActions
    {
        void OnHorisontalMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
